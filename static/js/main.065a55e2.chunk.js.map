{"version":3,"sources":["services/randomGenerator.js","services/gameFlowStarter.js","components/GameSettingsPanel/GameSettingsPanel.js","components/Message/Message.js","components/GameField/GameField.js","components/LeaderBoard/LeaderBoard.js","containers/GamePage/GamePage.js","App.js","index.js"],"names":["randomGenerator","min","max","Math","floor","random","resetGame","props","gameSquares","gameSettings","changeGameSettings","map","row","React","Children","forEach","children","cell","cellIndex","cloneElement","className","startGame","mode","modes","playersScore","userName","changeWinner","console","log","fiftyPercentScores","field","computer","user","setTimeout","player","updatedGameSquares","paintRandomSquare","delay","i","j","gameFlowStarter","winner","GameSettingPanel","handleInput","handleSelect","value","onChange","ev","target","type","placeholder","onClick","disabled","Message","text","GameField","handleSquareClick","getAttribute","LeaderBoard","winners","item","index","key","date","GamePage","useState","step","setGameSettings","winnersHistory","setWinersHistory","prevGameSettings","d","Date","minutes","getMinutes","hours","getHours","getDate","month","getMonth","result","getFullYear","useEffect","fetch","then","response","json","data","method","headers","body","JSON","stringify","length","cells","rows","data-id","push","id","rowIndex","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.065a55e2.chunk.js","sourcesContent":["const randomGenerator = (min, max) => {\r\n  return Math.floor(min + Math.random() * (max + 1 - min));\r\n}\r\n\r\nexport default randomGenerator","import React from 'react';\r\nimport randomGenerator from './randomGenerator';\r\n\r\nconst gameFlowStarter = (props) => {\r\n  if (props.gameSettings.winner) {\r\n    resetGame(props);\r\n  }\r\n  else {\r\n    startGame(props);\r\n  }\r\n}\r\n\r\nconst resetGame = (props) => {\r\n  const { gameSettings: { gameSquares }, changeGameSettings } = props;\r\n\r\n  const initialGameSquares = gameSquares.map(row => {\r\n    React.Children.forEach(row.props.children, (cell, cellIndex) => {\r\n      row.props.children[cellIndex] = React.cloneElement(cell, { className: '' })\r\n    });\r\n    return React.cloneElement(row);\r\n  });\r\n\r\n  changeGameSettings(initialGameSquares);\r\n}\r\n\r\nconst startGame = (props) => {\r\n  const {\r\n    gameSettings: { mode, modes, playersScore, userName, gameSquares },\r\n    changeGameSettings,\r\n    changeWinner\r\n  } = props;\r\n\r\n  console.log(playersScore);\r\n\r\n  const fiftyPercentScores = modes[mode].field * modes[mode].field / 2;\r\n\r\n  if (playersScore.computer > fiftyPercentScores || playersScore.user > fiftyPercentScores) {\r\n    (playersScore.computer > playersScore.user)\r\n      ? changeWinner('Computer')\r\n      : changeWinner(userName);\r\n  }\r\n  else {\r\n    setTimeout(() => {\r\n      let player = 'nobody';\r\n\r\n      const updatedGameSquares = gameSquares.map(row => {\r\n        React.Children.forEach(row.props.children, (cell, cellIndex) => {\r\n          if (cell.props.className === 'blue') {\r\n            row.props.children[cellIndex] = React.cloneElement(cell, { className: 'red' });\r\n            player = 'computer';\r\n          }\r\n        });\r\n        return React.cloneElement(row);\r\n      });\r\n\r\n      paintRandomSquare(updatedGameSquares, modes[mode].field, playersScore);\r\n\r\n      changeGameSettings(updatedGameSquares, player);\r\n\r\n    }, modes[mode].delay);\r\n  }\r\n}\r\n\r\nconst paintRandomSquare = (updatedGameSquares, field, playersScore) => {\r\n  const fiftyPercentScores = field * field / 2;\r\n\r\n  if (playersScore.computer + 1 <= fiftyPercentScores && playersScore.user + 1 <= fiftyPercentScores) {\r\n    let i = randomGenerator(0, field - 1);\r\n    let j = randomGenerator(0, field - 1);\r\n\r\n    while (updatedGameSquares[i].props.children[j].props.className !== '') {\r\n      i = randomGenerator(0, field - 1);\r\n      j = randomGenerator(0, field - 1);\r\n    }\r\n\r\n    updatedGameSquares[i].props.children[j] = React.cloneElement(\r\n      updatedGameSquares[i].props.children[j],\r\n      { className: 'blue' }\r\n    );\r\n  }\r\n}\r\n\r\nexport default gameFlowStarter;","import React from 'react';\r\nimport gameFlowStarter from '../../services/gameFlowStarter';\r\nimport './GameSettingsPanel.css';\r\n\r\nconst GameSettingPanel = (props) => {\r\n  const { gameSettings, handleInput, handleSelect } = props;\r\n\r\n  return (\r\n    <section className=\"game-setting-panel\">\r\n      <select\r\n        value={gameSettings.mode}\r\n        onChange={(ev) => handleSelect(ev.target.value)}\r\n      >\r\n        <option value=\"\">Pick game mode â–¾</option>\r\n        <option value=\"easyMode\">Easy mode</option>\r\n        <option value=\"normalMode\">Normal mode</option>\r\n        <option value=\"hardMode\">Hard mode</option>\r\n      </select>\r\n      <input\r\n        type='text'\r\n        placeholder='Enter your name'\r\n        value={gameSettings.userName}\r\n        onChange={(ev) => handleInput(ev.target.value)}\r\n      />\r\n      <button\r\n        onClick={() => gameFlowStarter(props)}\r\n        disabled={(gameSettings.mode && gameSettings.userName) ? false : true}\r\n      >\r\n        {(gameSettings.winner) ? 'PLAY AGAIN' : 'PLAY'}\r\n      </button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default GameSettingPanel;","import React from 'react';\r\nimport './Message.css';\r\n\r\nconst Message = ({ text }) => {\r\n  return (\r\n    <section className=\"message\">\r\n      <p>{text}</p>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport './GameField.css';\r\n\r\nconst GameField = ({ gameSquares, handleSquareClick }) => {\r\n  return (\r\n    <section className=\"game-field\">\r\n      <table onClick={ev => handleSquareClick(ev.target.getAttribute('data-id'))}>\r\n        <tbody>\r\n          {gameSquares}\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default GameField;","import React from 'react';\r\nimport './LeaderBoard.css';\r\n\r\nconst LeaderBoard = ({ winners }) => {\r\n  return (\r\n    <section className=\"leader-board\">\r\n      <h2>Leader Board</h2>\r\n      <ul>\r\n        {winners.map((item, index) =>\r\n          <li key={index}><span>{item.winner}</span><span>{item.date}</span></li>\r\n        )}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default LeaderBoard;","import React, { useState, useEffect } from 'react';\r\nimport GameSettingsPanel from '../../components/GameSettingsPanel/GameSettingsPanel';\r\nimport Message from '../../components/Message/Message';\r\nimport GameField from '../../components/GameField/GameField';\r\nimport LeaderBoard from '../../components/LeaderBoard/LeaderBoard';\r\nimport gameFlowStarter from '../../services/gameFlowStarter';\r\nimport './GamePage.css';\r\n\r\nfunction GamePage() {\r\n  const [gameSettings, setGameSettings] = useState({\r\n    mode: '',\r\n    userName: '',\r\n    gameSquares: [],\r\n    playersScore: {\r\n      user: 0,\r\n      computer: 0\r\n    },\r\n    winner: '',\r\n    step: 0\r\n  });\r\n  const [winnersHistory, setWinersHistory] = useState([]);\r\n\r\n  const handleInput = (value) => {\r\n    setGameSettings(prevGameSettings => ({ ...prevGameSettings, userName: value }))\r\n  }\r\n  const handleSelect = (value) => {\r\n    const cells = [], rows = [];\r\n\r\n    if (value) {\r\n      for (let i = 0; i < gameSettings.modes[value].field; i++) {\r\n        cells[i] = [];\r\n        for (let j = 0; j < gameSettings.modes[value].field; j++) {\r\n          cells[i][j] = <td key={j} data-id={`${i}${j}`} className=''></td>;\r\n        }\r\n        rows.push(<tr key={i}>{cells[i]}</tr>);\r\n      }\r\n    }\r\n\r\n    setGameSettings(prevGameSettings => ({\r\n      ...prevGameSettings,\r\n      mode: value,\r\n      gameSquares: rows,\r\n      playersScore: { user: 0, computer: 0 },\r\n      winner: ''\r\n    }));\r\n  }\r\n  const handleSquareClick = (id) => {\r\n    let player = '';\r\n\r\n    const updatedGameSquares = gameSettings.gameSquares.map((row, rowIndex) => {\r\n      React.Children.forEach(row.props.children, (cell, cellIndex) => {\r\n        if (cell.props.className === 'blue' && id === `${rowIndex}${cellIndex}`) {\r\n          row.props.children[cellIndex] = React.cloneElement(cell, { className: 'green' });\r\n          player = 'user';\r\n        }\r\n      });\r\n      return React.cloneElement(row);\r\n    });\r\n\r\n    if (player === 'user') {\r\n      changeGameSettings(updatedGameSquares, player);\r\n    }\r\n  }\r\n  const changeGameSettings = (value, player) => {\r\n    if (!player) {\r\n      setGameSettings(prevGameSettings => {\r\n        return {\r\n          ...prevGameSettings,\r\n          gameSquares: value,\r\n          playersScore: {\r\n            user: 0,\r\n            computer: 0\r\n          },\r\n          winner: '',\r\n          step: 0\r\n        }\r\n      })\r\n    }\r\n    if (player === 'nobody') {\r\n      setGameSettings(prevGameSettings => {\r\n        return {\r\n          ...prevGameSettings,\r\n          gameSquares: value,\r\n          step: prevGameSettings.step + 1\r\n        }\r\n      })\r\n    }\r\n    if (player === 'computer') {\r\n      setGameSettings(prevGameSettings => {\r\n        return {\r\n          ...prevGameSettings,\r\n          gameSquares: value,\r\n          playersScore: {\r\n            ...prevGameSettings.playersScore,\r\n            computer: prevGameSettings.playersScore.computer + 1\r\n          },\r\n          step: prevGameSettings.step + 1\r\n        }\r\n      })\r\n    }\r\n    if (player === 'user') {\r\n      setGameSettings(prevGameSettings => {\r\n        return {\r\n          ...prevGameSettings,\r\n          gameSquares: value,\r\n          playersScore: {\r\n            ...prevGameSettings.playersScore,\r\n            user: prevGameSettings.playersScore.user + 1,\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const changeWinner = (winner) => {\r\n    setGameSettings({ ...gameSettings, winner });\r\n\r\n    if (winner) {\r\n      const d = new Date();\r\n\r\n      const minutes = (d.getMinutes() > 9) ? d.getMinutes() : `0${d.getMinutes()}`;\r\n      const hours = (d.getHours() > 9) ? d.getHours() : `0${d.getHours()}`;\r\n      const date = (d.getDate() > 9) ? d.getDate() : `0${d.getDate()}`;\r\n      const month = (d.getMonth() > 9) ? d.getMonth() + 1 : `0${d.getMonth() + 1}`;\r\n\r\n      const result = `${hours}:${minutes}; ${date}.${month}.${d.getFullYear()}`;\r\n\r\n      setWinersHistory([...winnersHistory, { winner, date: result }]);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch('https://starnavi-frontend-test-task.herokuapp.com/game-settings')\r\n      .then(response => response.json())\r\n      .then(data => setGameSettings({ ...gameSettings, modes: data }));\r\n  }, []);\r\n  useEffect(() => {\r\n    fetch('https://starnavi-frontend-test-task.herokuapp.com/winners')\r\n      .then(response => response.json())\r\n      .then(data => setWinersHistory(data));\r\n  }, []);\r\n  useEffect(() => {\r\n    if (gameSettings.winner) {\r\n      fetch('https://starnavi-frontend-test-task.herokuapp.com/winners', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify(winnersHistory[winnersHistory.length - 1])\r\n      });\r\n    }\r\n  }, [winnersHistory]);\r\n  useEffect(() => {\r\n    if (gameSettings.mode) {\r\n      gameFlowStarter({ gameSettings, changeGameSettings, changeWinner });\r\n    }\r\n  }, [gameSettings.step])\r\n\r\n  return (\r\n    <article className=\"game-page\">\r\n      <div className=\"game\">\r\n        <GameSettingsPanel\r\n          gameSettings={gameSettings}\r\n          handleInput={handleInput}\r\n          handleSelect={handleSelect}\r\n          changeGameSettings={changeGameSettings}\r\n          changeWinner={changeWinner}\r\n        />\r\n        <Message\r\n          text={gameSettings.winner ? `${gameSettings.winner} won!` : ''}\r\n        />\r\n        <GameField\r\n          gameSquares={gameSettings.gameSquares}\r\n          handleSquareClick={handleSquareClick}\r\n        />\r\n      </div>\r\n      <LeaderBoard\r\n        winners={winnersHistory}\r\n      />\r\n    </article >\r\n  );\r\n}\r\n\r\nexport default GamePage;","import React from 'react';\r\nimport GamePage from './containers/GamePage/GamePage';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GamePage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}